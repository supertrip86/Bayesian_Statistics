b_vec <- c(0,1.5,3,4.5)
sample_var <- var(mydata$Y)
curve(
dinvgamma(x, shape=a_vec[1], rate=b_vec[1]),
col=1,
lwd=3,
xlab=expression(paste(tau^2)),
ylab=expression(paste(pi(tau^2))),
ylim=c(0,25),
xlim=c(0,0.4)
)
for (i in 2:length(a_vec)){
for (j in 2:length(b_vec)){
curve(
dinvgamma(x,shape=a_vec[i], rate=b_vec[j]),
add=T,
lwd=3,
col=i+j,
ylim=c(0,25),
xlim=c(0,0.4)
)
}
}
abline(v = sample_var, col="green", lwd=3, lty=2)
axis(1, at = sample_var, labels = round(sample_var, 3), pos = 2)
curve(
dinvgamma(x, shape=20, rate=1.5),
col="turquoise",
lwd=3,
xlab=expression(paste(tau^2)),
ylab=expression(paste(pi(tau^2))),
ylim=c(0,25),
xlim=c(0,0.3)
)
abline(v = sample_var, col="green", lwd=3, lty=2)
axis(1, at = sample_var, labels = round(sample_var, 3), pos = 2)
regression <- lm(mydata$Y ~ mydata$X, data = mydata)
intercept <- regression$coefficients[1]
slope <- regression$coefficients[2]
intercept
candidates <- c(1,5,10,15,30)
curve(
dnorm(x, mean = 0,sd = sqrt(candidates[1])),
col=1,
lwd=3,
xlab=expression(alpha),
ylab=expression(paste(pi(alpha))),
ylim=c(0,0.5),
xlim=c(-6,6)
)
for (i in 2:length(candidates)){
curve(
dnorm(x,mean = 0,sd = sqrt(candidates[i])),
add=T,
lwd=3,
col=i
)
}
abline(v = intercept, col="green", lwd=3, lty=2)
curve(
dnorm(x, mean = 0,sd = sqrt(5)),
col="orchid",
lwd=3,
xlab=expression(alpha),
ylab=expression(paste(pi(alpha))),
ylim=c(0,0.2),
xlim=c(-6,6)
)
abline(v = intercept, col="green", lwd=3, lty=2)
candidates <- c(0.01,0.05,0.1,0.2,0.3)
curve(
dnorm(x, mean = 0,sd = sqrt(candidates[1])),
col=1,
lwd=3,
xlab=expression(beta),
ylab=expression(paste(pi(beta))),
ylim=c(0,5),
xlim=c(-1,1)
)
for (i in 2:length(candidates)){
curve(
dnorm(x,mean = 0,sd = sqrt(candidates[i])),
add=T,
lwd=3,
col=i
)
}
abline(v = slope, col="green", lwd=3, lty=2)
curve(
dnorm(x, mean = 0,sd = sqrt(0.05)),
col="blue",
lwd=3,
xlab=expression(beta),
ylab=expression(paste(pi(beta))),
ylim=c(0,2),
xlim=c(-0.5,0.5)
)
abline(v = slope, col="green", lwd=3, lty=2)
fc_alpha <- function(sig_sq_alpha, beta, gamma, tau2, mydata){
x <- mydata$X
y <- mydata$Y
n <- length(y)
post_mu <- sig_sq_alpha / (n * sig_sq_alpha+tau2) * sum(y + beta * gamma^x)
post_sig_sq <- sig_sq_alpha * tau2 / (n * sig_sq_alpha + tau2)
result <- rnorm(n = 1, mean = post_mu, sd = sqrt(post_sig_sq))
if(result < 1) {
result <- 1
}
return(result)
}
fc_beta <- function(sig_sq_beta, alpha, gamma, tau2, mydata){
x <- mydata$X
y <- mydata$Y
n <- length(y)
post_mu <- sig_sq_beta / (sig_sq_beta * sum((gamma^(2*x))) + tau2) * sum((alpha - y)*gamma^x)
post_sig_sq <- sig_sq_beta * tau2 / (sig_sq_beta * sum((gamma^x)^2 + tau2))
result <- rnorm(n = 1, mean = post_mu, sd = sqrt(post_sig_sq))
if(result < 1 ) {
result <- 1
}
return(result)
}
fc_tau <- function(a, b, alpha, beta, gamma, mydata){
x <- mydata$X
y <- mydata$Y
n <- length(y)
post_a <- n/2 + a
post_b <- 0
for (i in 1:n){
post_b <- post_b + (y[i]-(alpha-beta * gamma^x[i]))^2
}
post_b <- (post_b)/2 + b
result <- rinvgamma(n = 1, shape = post_a, rate = post_b)
return(result)
}
fc_gamma <- function(alpha, beta, gamma, tau2, sig_sq_beta, mydata){
x <- mydata$X
y <- mydata$Y
n <- length(y)
post_gamma <- 0
for (i in 1:n){
post_gamma <- post_gamma + (y[i] - (alpha - beta * gamma^x[i]))^2
}
post_gamma <- (-1/(2*tau2))*post_gamma
return(post_gamma)
}
mh_fc_gamma <- function(alpha, beta, first_gamma, tau2, mydata, mh_trials, seed){
for(i in 1:mh_trials){
set.seed(seed)      # at every iteration we change the seed, by incrementing its current value!
gamma_ext <- runif(n = 1, min = 0, max = 1)
num <- fc_gamma(
alpha = alpha,
beta = beta,
gamma = gamma_ext,
tau2 = tau2,
sig_sq_beta = sig_sq_beta,
mydata = mydata
)
den <- fc_gamma(
alpha = alpha,
beta = beta,
gamma = first_gamma,
tau2 = tau2,
sig_sq_beta = sig_sq_beta,
mydata = mydata
)
zz <- exp(num - den)
zzmin <- min(zz,1)
accept <- 0
if (zzmin >= 1) {
first_gamma <- gamma_ext
accept <- 1
}
else
{
if (rbinom(1,1,zzmin)==1) {
first_gamma <- gamma_ext
accept <- 1
}
}
seed <- seed + 100
}
return(c(new_beta=first_gamma, accept=accept)  )
}
a <- 20
b <- 1.5
sig_sq_alpha <- 5
sig_sq_beta <- 0.05
seed <- 123
gibbs_iter <- 10000
gibbs_matrix <- matrix(nrow = gibbs_iter, ncol = 7)
gibbs_matrix[1,1:4] <- c(1,1,0.5,0.05)
for(i in 2:gibbs_iter){
gibbs_res <- fc_tau(
a = a,
b = b,
alpha = gibbs_matrix[i-1,1],
beta = gibbs_matrix[i-1,2],
gamma = gibbs_matrix[i-1,3],
mydata = mydata
)
gibbs_matrix[i,4] <- gibbs_res[1]
gibbs_res <- fc_alpha(
sig_sq_alpha = sig_sq_alpha,
gamma = gibbs_matrix[i-1,3],
beta = gibbs_matrix[i-1,2],
tau2 = gibbs_matrix[i-1,4],
mydata = mydata
)
gibbs_matrix[i,1] <- gibbs_res[1]
gibbs_matrix[i,5] <- gibbs_res[2]
gibbs_res <- fc_beta(
sig_sq_beta = sig_sq_beta,
gamma = gibbs_matrix[i-1,3],
alpha = gibbs_matrix[i-1,1],
tau2 = gibbs_matrix[i-1,4],
mydata = mydata
)
gibbs_matrix[i,2] <- gibbs_res[1]
gibbs_matrix[i,6] <- gibbs_res[2]
gibbs_res <- mh_fc_gamma(
alpha = gibbs_matrix[i-1,1],
beta = gibbs_matrix[i-1,2],
first_gamma = gibbs_matrix[i-1,3],
tau2 = gibbs_matrix[i-1,4],
mydata = mydata,
mh_trials = 5,
seed = seed
)
gibbs_matrix[i,3] <- gibbs_res[1]
gibbs_matrix[i,7] <- gibbs_res[2]
seed <- seed + 100
}
plot(
gibbs_matrix[,1],
type = 'l',
main = expression(alpha),
col = "red",
xlab = "# iterations",
ylab = expression(alpha),
lwd = 3
)
plot(
gibbs_matrix[,2],
type = 'l',
main = expression(beta),
col = "blue",
xlab = "# iterations",
ylab = expression(beta),
lwd = 3
)
plot(
gibbs_matrix[,3],
type = 'l',
main = expression(gamma),
col = "green",
xlab = "# iterations",
ylab = expression(gamma),
lwd = 3
)
plot(
gibbs_matrix[,4],
type = 'l',
main = expression(tau^2),
col = "orchid",
xlab = "# iterations",
ylab = expression(tau^2),
lwd = 3
)
plot(
cummean(gibbs_res[,1]),
type='l',
xlab='MCMC Iterations',
ylab=expression(hat(I)),
main=expression(alpha),
col="blue4",
lwd = 2
)
plot(
cumsum(gibbs_res[,1]) / (1:length(gibbs_res[,1])),
type='l',
xlab='MCMC Iterations',
ylab=expression(hat(I)),
main=expression(alpha),
col="blue4",
lwd = 2
)
plot(
cumsum(gibbs_res[,1]) / 10000,
type='l',
xlab='MCMC Iterations',
ylab=expression(hat(I)),
main=expression(alpha),
col="blue4",
lwd = 2
)
gibbs_res[,1]
plot(
cumsum(gibbs_matrix[,1]) / 10000,
type='l',
xlab='MCMC Iterations',
ylab=expression(hat(I)),
main=expression(alpha),
col="blue4",
lwd = 2
)
plot(
cumsum(gibbs_matrix[,1]) / (1:length(gibbs_matrix[,1])),
type='l',
xlab='MCMC Iterations',
ylab=expression(hat(I)),
main=expression(alpha),
col="blue4",
lwd = 2
)
plot(
cumsum(gibbs_matrix[,1]) / (1:length(gibbs_matrix[,1])),
xlab='MCMC Iterations',
ylab=expression(hat(I)),
main=expression(alpha),
col="blue4",
lwd = 2
)
plot(
cumsum(gibbs_matrix[,1]) / (1:length(gibbs_matrix[,1])),
xlab='MCMC Iterations',
ylab=expression(hat(I)),
main=expression(alpha),
col="blue4",
lwd = 3
)
plot(
cumsum(gibbs_matrix[,1]) / (1:length(gibbs_matrix[,1])),
xlab='# iterations',
ylab=expression(hat(I)),
main=expression(alpha),
col="blue4",
lwd = 3
)
plot(
cumsum(gibbs_matrix[,1]) / (1:length(gibbs_matrix[,1])),
xlab='# iterations',
ylab=expression(hat(I)),
main=expression(alpha),
col="blue4",
pch=20
)
?abline
plot(
cumsum(gibbs_matrix[,1]) / (1:length(gibbs_matrix[,1])),
xlab='# iterations',
ylab=expression(hat(I)),
main=expression(alpha),
col="blue4",
pch=20
)
abline(mean(gibbs_matrix[,1]), col="red")
plot(
cumsum(gibbs_matrix[,1]) / (1:length(gibbs_matrix[,1])),
xlab='# iterations',
ylab=expression(hat(I)),
main=expression(alpha),
col="blue4",
pch=20
)
abline(mean(gibbs_matrix[,1]), col="red")
plot(
cumsum(gibbs_matrix[,1]) / (1:length(gibbs_matrix[,1])),
xlab='# iterations',
ylab=expression(hat(I)),
main=expression(alpha),
col="blue4",
pch=20
)
abline(h = mean(gibbs_matrix[,1]), col="red")
plot(
cumsum(gibbs_matrix[,1]) / (1:length(gibbs_matrix[,1])),
ylim = c(1.5,3)
xlab='# iterations',
plot(
cumsum(gibbs_matrix[,1]) / (1:length(gibbs_matrix[,1])),
ylim = c(1.5,3),
xlab='# iterations',
ylab=expression(hat(I)),
main=expression(alpha),
col="blue4",
pch=20
)
abline(h = mean(gibbs_matrix[,1]), col="red")
plot(
cumsum(gibbs_matrix[,1]) / (1:length(gibbs_matrix[,1])),
ylim = c(1.7,2.7),
xlab='# iterations',
ylab=expression(hat(I)),
main=expression(alpha),
col="blue4",
pch=20
)
abline(h = mean(gibbs_matrix[,1]), col="red")
plot(
cumsum(gibbs_matrix[,1]) / (1:length(gibbs_matrix[,1])),
ylim = c(1.8,2.8),
xlab='# iterations',
ylab=expression(hat(I)),
main=expression(alpha),
col="blue4",
pch=20
)
abline(h = mean(gibbs_matrix[,1]), col="red")
plot(
gibbs_matrix[,1],
type = 'l',
main = expression(alpha),
col = "magenta",
xlab = "# iterations",
ylab = expression(alpha),
lwd = 3
)
plot(
gibbs_matrix[,1],
type = 'l',
main = expression(alpha),
col = "orange",
xlab = "# iterations",
ylab = expression(alpha),
lwd = 3
)
plot(
cumsum(gibbs_matrix[,1]) / (1:length(gibbs_matrix[,1])),
ylim = c(1.8,2.8),
xlab = '# iterations',
ylab = expression(hat(I)),
main = expression(alpha),
col = "orange",
pch=20
)
abline(h = mean(gibbs_matrix[,1]), col="red")
target <- gibbs_matrix[,1]
plot(
cumsum(target) / (1:length(target)),
ylim = c(1.8,2.8),
xlab = '# iterations',
ylab = expression(hat(I)),
main = expression(alpha),
col = "orange",
pch=20
)
abline(h = mean(target), col="red")
target <- gibbs_matrix[,2]
plot(
cumsum(target) / (1:length(target)),
ylim = c(1.8,2.8),
xlab = '# iterations',
ylab = expression(hat(I)),
main = expression(alpha),
col = "blue",
pch=20
)
abline(h = mean(target), col="red")
target <- gibbs_matrix[,1]
plot(
cumsum(target) / (1:length(target)),
ylim = c(1.8,2.8),
xlab = '# iterations',
ylab = expression(hat(I)),
main = expression(alpha),
col = "orange",
pch = 20
)
abline(h = mean(target), col="red")
target <- gibbs_matrix[,2]
plot(
cumsum(target) / (1:length(target)),
ylim = c(1.8,2.8),
xlab = '# iterations',
ylab = expression(hat(I)),
main = expression(alpha),
col = "blue",
pch = 20
)
abline(h = mean(target), col="red")
target <- gibbs_matrix[,2]
plot(
cumsum(target) / (1:length(target)),
#ylim = c(1.8,2.8),
xlab = '# iterations',
ylab = expression(hat(I)),
main = expression(alpha),
col = "blue",
pch = 20
)
abline(h = mean(target), col="red")
target <- gibbs_matrix[,3]
plot(
cumsum(target) / (1:length(target)),
xlab = '# iterations',
ylab = expression(hat(I)),
main = expression(alpha),
col = "green",
pch = 20
)
abline(h = mean(target), col="red")
target <- gibbs_matrix[,4]
plot(
cumsum(target) / (1:length(target)),
xlab = '# iterations',
ylab = expression(hat(I)),
main = expression(alpha),
col = "green",
pch = 20
)
abline(h = mean(target), col="red")
